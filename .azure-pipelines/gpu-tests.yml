# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - "master"
      - "release/*"
      - "refs/tags/*"
pr:
  - "master"
  - "release/*"

jobs:
  - job: pytest
    strategy:
      matrix:
        'PyTorch - LTS':
          image: "pytorchlightning/pytorch_lightning:base-cuda-py3.7-torch1.8"
        'PyTorch - stable':
          image: "pytorchlightning/pytorch_lightning:base-cuda-py3.9-torch1.11"
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "100"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"

    pool: azure-gpus-spot

    container:
      image: $(image)
      # default shm size is 64m. Increase it to avoid:
      # 'Error while creating shared memory: unhandled system error, NCCL version 2.7.8'
      options: "--runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all --shm-size=512m"

    workspace:
      clean: all

    steps:

    - bash: |
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        which python && which pip
        python --version
        pip --version
        pip list
      displayName: 'Image info & NVIDIA'

    - bash: |
        python -c "fname = 'requirements/strategies.txt' ; lines = [line for line in open(fname).readlines() if 'horovod' not in line] ; open(fname, 'w').writelines(lines)"
        CUDA_VERSION_MM=$(python -c "import torch ; print(''.join(map(str, torch.version.cuda.split('.')[:2])))")
        pip install "bagua-cuda$CUDA_VERSION_MM>=0.9.0"
        pip install . --requirement requirements/devel.txt
        pip install . --requirement requirements/strategies.txt
        pip list
      displayName: 'Install dependencies'

    - bash: |
        set -e
        python requirements/collect_env_details.py
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu >= 2, f'GPU: {mgpu}'"
        python requirements/check-avail-strategies.py
        python requirements/check-avail-extras.py
      displayName: 'Env. details'

    - bash: bash .actions/pull_legacy_checkpoints.sh
      displayName: 'Get legacy checkpoints'

    - bash: |
        python -m coverage run --source pytorch_lightning -m pytest pytorch_lightning tests --ignore tests/benchmarks -v --junitxml=$(Build.StagingDirectory)/test-results.xml --durations=50
      env:
        CUDA_LAUNCH_BLOCKING: 1
      displayName: 'Testing: standard'

    - bash: |
        bash tests/standalone_tests.sh
      env:
        PL_USE_MOCKED_MNIST: "1"
        CUDA_LAUNCH_BLOCKING: 1
      displayName: 'Testing: standalone'

    - bash: |
        python -m coverage report
        python -m coverage xml
        python -m coverage html
        python -m codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) --flags=gpu,pytest --name="GPU-coverage" --env=linux,azure
        ls -l
      displayName: 'Statistics'

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testResultsFiles: '$(Build.StagingDirectory)/test-results.xml'
        testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
      condition: succeededOrFailed()

    # todo: re-enable after schema check pass, also atm it seems does not have any effect
    #- task: PublishCodeCoverageResults@2
    #  displayName: 'Publish coverage report'
    #  inputs:
    #    codeCoverageTool: 'Cobertura'
    #    summaryFileLocation: 'coverage.xml'
    #    reportDirectory: '$(Build.SourcesDirectory)/htmlcov'
    #    testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
    #  condition: succeededOrFailed()

    - script: |
        set -e
        python -m pytest pl_examples -v --maxfail=2 --durations=0
        bash pl_examples/run_examples.sh --trainer.accelerator=gpu --trainer.devices=1
        bash pl_examples/run_examples.sh --trainer.accelerator=gpu --trainer.devices=2 --trainer.strategy=ddp
        bash pl_examples/run_examples.sh --trainer.accelerator=gpu --trainer.devices=2 --trainer.strategy=ddp --trainer.precision=16
      env:
        PL_USE_MOCKED_MNIST: "1"
        CUDA_LAUNCH_BLOCKING: 1
      displayName: 'Testing: examples'

    - bash: |
        python -m pytest tests/benchmarks -v --maxfail=2 --durations=0
      displayName: 'Testing: benchmarks'
